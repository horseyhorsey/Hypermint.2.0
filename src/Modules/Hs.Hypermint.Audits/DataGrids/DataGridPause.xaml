<UserControl x:Class="Hs.Hypermint.Audits.DataGrids.DataGridPause"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:Hs.Hypermint.Audits.DataGrids"
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
             xmlns:prism="http://prismlibrary.com/"  
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="600">

    <UserControl.Resources>
        <Style TargetType="{x:Type DataGridCell}">
            <Style.Triggers>
                <DataTrigger 
                    Binding="{Binding RelativeSource={RelativeSource Self},Path=Content.Text}" 
                     Value="True">
                    <Setter Property="Background" Value="#263DDE36"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=Content.Text}"
                             Value="False">
                    <Setter Property="Background" Value="#26FF5454"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
    </UserControl.Resources>
    
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="65"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="40"/>
        </Grid.RowDefinitions>

        <DataGrid  x:Name="DatabaseDefaultGridMainMenu" 
                   Grid.Row="0" BorderThickness="4" AutoGenerateColumns="False" 
                   IsSynchronizedWithCurrentItem="True"
                  IsReadOnly="True" SelectionMode="Single" SelectionUnit="Cell"
                  ItemsSource="{Binding AuditListDefaults}">

            <i:Interaction.Triggers>
                <i:EventTrigger EventName="CurrentCellChanged">
                    <prism:InvokeCommandAction 
                            Command="{Binding CurrentCellChanged}" 
                            CommandParameter="{Binding CurrentColumn,
                            ElementName=DatabaseDefaultGridMainMenu,UpdateSourceTrigger=PropertyChanged}">
                    </prism:InvokeCommandAction>
                </i:EventTrigger>
            </i:Interaction.Triggers>

            <DataGrid.Columns>
                <DataGridTextColumn Header="Artwork" Binding="{Binding HaveArtwork}"/>
                <DataGridTextColumn Header="Backgrounds" Binding="{Binding HaveBackgrounds}"/>
                <DataGridTextColumn Header="Controller" Binding="{Binding HaveController}"/>
                <DataGridTextColumn Header="MultiGame" Binding="{Binding HaveMultiGame}" SortDirection="Ascending"/>
                <DataGridTextColumn Header="Music" Binding="{Binding HaveMusic}"/>
                <DataGridTextColumn Header="Videos" Binding="{Binding HaveVideo}"/>
            </DataGrid.Columns>
        </DataGrid>

        <DataGrid x:Name="DatabaseGridMainMenu" 
                  Grid.Row="1" BorderThickness="2" 
                  AutoGenerateColumns="False" IsReadOnly="True" 
                   SelectionMode="Single"  IsSynchronizedWithCurrentItem="True"
                  ItemsSource="{Binding AuditList}">

            <i:Interaction.Triggers>
                <i:EventTrigger EventName="CurrentCellChanged">
                    <prism:InvokeCommandAction 
                            Command="{Binding CurrentCellChanged}" 
                            CommandParameter="{Binding CurrentColumn,
                            ElementName=DatabaseGridMainMenu,UpdateSourceTrigger=PropertyChanged}">
                    </prism:InvokeCommandAction>
                </i:EventTrigger>
            </i:Interaction.Triggers>
            
            <DataGrid.Columns>
                <DataGridTextColumn Header="RomName" Binding="{Binding RomName}"/>
                <DataGridTextColumn Header="Description" Binding="{Binding Description}"/>
                <DataGridTextColumn Header="Artwork" Binding="{Binding HaveArtwork}"/>
                <DataGridTextColumn Header="Backgrounds" Binding="{Binding HaveBackgrounds}"/>
                <DataGridTextColumn Header="Controller" Binding="{Binding HaveController}"/>
                <DataGridTextColumn Header="Guides" Binding="{Binding HaveGuide}" SortDirection="Ascending"/>
                <DataGridTextColumn Header="Manuals" Binding="{Binding HaveManual}" SortDirection="Ascending"/>
                <DataGridTextColumn Header="MultiGame" Binding="{Binding HaveMultiGame}" SortDirection="Ascending"/>
                <DataGridTextColumn Header="Screenshots" Binding="{Binding HaveScreenshots}"/>
                <DataGridTextColumn Header="Music" Binding="{Binding HaveMusic}"/>
                <DataGridTextColumn Header="Saved Game" Binding="{Binding HaveSaves}"/>
                <DataGridTextColumn Header="Videos" Binding="{Binding HaveVideo}" SortDirection="Ascending"/>
            </DataGrid.Columns>
        </DataGrid>

        <DockPanel Grid.Row="2">
            <Button Grid.Row="2" Command="{Binding PauseMediaScanCommand}" Style="{DynamicResource MetroCircleButtonStyle}"
                Height="40" Width="40" HorizontalAlignment="Left"
                ToolTip="Scan for pause media" IsEnabled="{Binding ScanEnabled}">
                <Rectangle Width="15" Height="15"
                       Fill="{Binding Path=Foreground, RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type Button}}}">
                    <Rectangle.OpacityMask>
                        <VisualBrush Stretch="Fill" Visual="{DynamicResource appbar_reset}"/>
                    </Rectangle.OpacityMask>
                </Rectangle>
            </Button>

            <Button Command="{Binding LaunchRlMode}" CommandParameter="Pause"
                    Style="{DynamicResource MetroCircleButtonStyle}"
                Height="40" Width="40" HorizontalAlignment="Left"
                ToolTip="Load pause menu for this game" IsEnabled="{Binding ScanEnabled}">
                <Rectangle Width="15" Height="15"
                       Fill="{Binding Path=Foreground, RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type Button}}}">
                    <Rectangle.OpacityMask>
                        <VisualBrush Stretch="Fill" Visual="{DynamicResource appbar_image}"/>
                    </Rectangle.OpacityMask>
                </Rectangle>
            </Button>
        </DockPanel>
        
    </Grid>
</UserControl>
